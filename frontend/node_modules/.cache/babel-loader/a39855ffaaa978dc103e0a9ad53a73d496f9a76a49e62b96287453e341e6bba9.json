{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pandi\\\\Code-Battle\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport socket from \"./socket\";\nimport CodeEditor from \"./components/CodeEditor\";\nimport RunPanel from \"./components/RunPanel\";\nimport OutputPanel from \"./components/OutputPanel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [code, setCode] = useState(`// Try me!\nfunction main() {\n  console.log(\"Hello from CodeBattle Arena!\");\n}\nmain();`);\n  const [language, setLanguage] = useState(\"javascript\");\n  const [stdin, setStdin] = useState(\"\");\n  const [running, setRunning] = useState(false);\n  const [stdout, setStdout] = useState(\"\");\n  const [stderr, setStderr] = useState(\"\");\n  const [exitCode, setExitCode] = useState(null);\n  useEffect(() => {\n    socket.on(\"connect\", () => {\n      console.log(\"Connected to server:\", socket.id);\n    });\n    socket.on(\"code-update\", newCode => setCode(newCode));\n    return () => {\n      socket.off(\"connect\");\n      socket.off(\"code-update\");\n    };\n  }, []);\n  const handleCodeChange = value => {\n    setCode(value);\n    socket.emit(\"code-update\", value);\n  };\n  const runCode = async () => {\n    setRunning(true);\n    setStdout(\"\");\n    setStderr(\"\");\n    setExitCode(null);\n    try {\n      const res = await fetch(\"http://localhost:5000/api/run\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          language,\n          code,\n          stdin\n          // version: \"*\"  // optional; backend defaults to latest\n        })\n      });\n      const data = await res.json();\n      if (!res.ok) {\n        setStderr((data === null || data === void 0 ? void 0 : data.error) || \"Run failed\");\n      } else {\n        var _data$exitCode;\n        setStdout(data.stdout || \"\");\n        setStderr(data.stderr || \"\");\n        setExitCode((_data$exitCode = data.exitCode) !== null && _data$exitCode !== void 0 ? _data$exitCode : null);\n      }\n    } catch (err) {\n      setStderr(err.message || \"Network error\");\n    } finally {\n      setRunning(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 1000,\n      margin: \"16px auto\",\n      padding: \"0 12px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"CodeBattle Arena \\uD83C\\uDFC6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RunPanel, {\n      language: language,\n      setLanguage: setLanguage,\n      stdin: stdin,\n      setStdin: setStdin,\n      onRun: runCode,\n      running: running\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CodeEditor, {\n      code: code,\n      onChange: handleCodeChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OutputPanel, {\n      stdout: stdout,\n      stderr: stderr,\n      exitCode: exitCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ab2QLahRpllTnXqRQm47K42pmmA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","socket","CodeEditor","RunPanel","OutputPanel","jsxDEV","_jsxDEV","App","_s","code","setCode","language","setLanguage","stdin","setStdin","running","setRunning","stdout","setStdout","stderr","setStderr","exitCode","setExitCode","on","console","log","id","newCode","off","handleCodeChange","value","emit","runCode","res","fetch","method","headers","body","JSON","stringify","data","json","ok","error","_data$exitCode","err","message","style","maxWidth","margin","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onRun","onChange","_c","$RefreshReg$"],"sources":["C:/Users/pandi/Code-Battle/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport socket from \"./socket\";\nimport CodeEditor from \"./components/CodeEditor\";\nimport RunPanel from \"./components/RunPanel\";\nimport OutputPanel from \"./components/OutputPanel\";\n\nfunction App() {\n  const [code, setCode] = useState(`// Try me!\nfunction main() {\n  console.log(\"Hello from CodeBattle Arena!\");\n}\nmain();`);\n  const [language, setLanguage] = useState(\"javascript\");\n  const [stdin, setStdin] = useState(\"\");\n  const [running, setRunning] = useState(false);\n  const [stdout, setStdout] = useState(\"\");\n  const [stderr, setStderr] = useState(\"\");\n  const [exitCode, setExitCode] = useState(null);\n\n  useEffect(() => {\n    socket.on(\"connect\", () => {\n      console.log(\"Connected to server:\", socket.id);\n    });\n\n    socket.on(\"code-update\", (newCode) => setCode(newCode));\n\n    return () => {\n      socket.off(\"connect\");\n      socket.off(\"code-update\");\n    };\n  }, []);\n\n  const handleCodeChange = (value) => {\n    setCode(value);\n    socket.emit(\"code-update\", value);\n  };\n\n  const runCode = async () => {\n    setRunning(true);\n    setStdout(\"\");\n    setStderr(\"\");\n    setExitCode(null);\n\n    try {\n      const res = await fetch(\"http://localhost:5000/api/run\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          language,\n          code,\n          stdin,\n          // version: \"*\"  // optional; backend defaults to latest\n        }),\n      });\n\n      const data = await res.json();\n\n      if (!res.ok) {\n        setStderr(data?.error || \"Run failed\");\n      } else {\n        setStdout(data.stdout || \"\");\n        setStderr(data.stderr || \"\");\n        setExitCode(data.exitCode ?? null);\n      }\n    } catch (err) {\n      setStderr(err.message || \"Network error\");\n    } finally {\n      setRunning(false);\n    }\n  };\n\n  return (\n    <div style={{ maxWidth: 1000, margin: \"16px auto\", padding: \"0 12px\" }}>\n      <h1>CodeBattle Arena üèÜ</h1>\n      <RunPanel\n        language={language}\n        setLanguage={setLanguage}\n        stdin={stdin}\n        setStdin={setStdin}\n        onRun={runCode}\n        running={running}\n      />\n      <CodeEditor code={code} onChange={handleCodeChange} />\n      <OutputPanel stdout={stdout} stderr={stderr} exitCode={exitCode} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}